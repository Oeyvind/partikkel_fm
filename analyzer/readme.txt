To use analyzer:

python generate_and_analyze.py dataset mode nosave
- dataset: set the base filename for generated files 
- mode can be 'csound' or 'spectrogram'
- the third argument can be used to skip generation of sound files (for debugging)
  - which again makes the spectrogram command invalid, as it has not soundfiles on which to make the spectrogram
- Normal operation example (run both one after another):
  python generate_and_analyze.py test csound
  python generate_and_analyze.py test spectrogram
  - will render audio with the parameter settings for graindurs, modindices, delays, grainpitches
- set the parameters in the file {dataset}_parameters.py
  - see for example test_parameters.py
- all parameter combinations will be rendered, so it creates a large number of files in /data
- each parameter combination creates a .sco file and a .txt file
- the txt file contains analysis data generated by Csound
  - it has one line for each sideband subdivision (from 1 to 10)
  - each line has: 
    - number of sidebands found
    - max number of sidebands expoected for this sideband subdivision (in as many octaves as we look into)
    - crest value 
      - the first line has global crest for the sound
      - other lines have average crest over all frequency bands for that sideband division
- an additional argument (any) will also save sound files and spectrum plots for each file
  python generate_and_analyze.py filename True

python display.py dataset mode
- will show a 3d plot of the analysis data
- mode can be 'analyze' or 'saved'
  - analyze will read all files, create the data array (and save it to file)
  - saved will just read the data array from file
  - both modes will display the 3d plot (use analyze the first run, and then saved for later runs where the data has not changed)